environment:
  global:
    REPO_DIR: pytables
    PACKAGE_NAME: tables
    BUILD_COMMIT: v3.4.2
    BUILDWHEEL: "True"  # trigger setup.py to include zlib.dll
    BUILD_DEPENDS: "hdf5 numpy>=1.8.0 numexpr>=2.5.2 six cython bzip2"
    TEST_DEPENDS: "numpy>=1.8.0 numexpr>=2.5.2 six>=1.9.0 mock"
    WHEELHOUSE_UPLOADER_USERNAME: travis-worker
    WHEELHOUSE_UPLOADER_SECRET:
        secure:
            9s0gdDGnNnTt7hvyNpn0/ZzOMGPdwPp2SewFTfGzYk7uI+rdAN9rFq2D1gAP4NQh

    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C %APPVEYOR_BUILD_FOLDER%\\multibuild\\ci\\appveyor\\windows_sdk.cmd"

  matrix:
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"

# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

matrix:
    fast_finish: true

install:
    # Fetch submodules
    - git submodule update --init --recursive

    # Install miniconda and fix headers
    - ps: .\\multibuild\\ci\\appveyor\\install.ps1
    - ps: .\\multibuild\\ci\\appveyor\\missing-headers.ps1
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
    - conda info

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
    # Install build requirements
    - conda create --yes -n build_env python=%PYTHON_VERSION% %BUILD_DEPENDS%
    - activate build_env

    # Additional pre install steps:
    - set HDF5_DIR=%CONDA_PREFIX%\Library\
    - set BZIP2_DIR=%CONDA_PREFIX%\Library\
    - set LIBRARY_PATH=%HDF5_DIR%\lib

    # build wheel:
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - "%CMD_IN_ENV% python setup.py bdist_wheel"

test_script:
    # create test env
    - conda create --yes -n test_env python=%PYTHON_VERSION% %TEST_DEPENDS%
    - activate test_env

    # install from wheel
    - pip install --no-index --find-links dist/ %PACKAGE_NAME%

    - cd ..
    # numpy 1.13.0 breaks the tests. The failure is not critical.
    # Run only basics tests until numpy 1.13.1 is available.
    #- python -m tables.tests.test_all
    - python -m tables.tests.test_basics

artifacts:
    - path: "%REPO_DIR%\\dist\\*"

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - cd %REPO_DIR%
  - pip install wheelhouse-uploader
  - python -m wheelhouse_uploader upload
    --no-ssl-check --local-folder=dist --no-update-index wheels
